spring:
  profiles:
    active: local
    group:
      local: local, common
      blue: blue, common
      green: green, common

server:
  env: blue

---

spring:
  config:
    activate:
      on-profile: local

server:
  port: 8080
  serverAddress: localhost

serverName: local_server

---
spring:
  config:
    activate:
      on-profile: blue

server:
  port: 8080
  serverAddress: 43.200.79.117

serverName: blue_server

---
spring:
  config:
    activate:
      on-profile: green

server:
  port: 8081
  serverAddress: 43.200.79.117

serverName: green_server

---

# Spring Data Source 설정 
spring:
  devtools:
    restart:
      enabled: true
    livereload:
      enabled: true
  application:
    name: final-prod
    
  output:
    ansi:
      enabled: always 

  # 데이터 베이스 
  datasource:
      url: jdbc:mysql://ddajait-database.c7q262e6c0pc.ap-northeast-2.rds.amazonaws.com/ddajait_data 
      username: admin
      password: qwerasdf1!
      driver-class-name: com.mysql.cj.jdbc.Driver

    # sql:
    #   init:
    #     mode: always



    #  데이터 베이스 커넥션 
  jpa:
    hibernate:
      ddl-auto: update 
    properties:
      properties:
      # hibernate:
      #   dialect: org.hibernate.dialect.MySQLDialect
          
    # defer-datasource-initialization: true
        

  # mustache (1. 루트폴더 변경, 2. 타임리프 캐시 설정 변경)
  mustache:
    prefix: classpath:templates/
    check-template-location: true
    suffix: .html
    cache: false

  mvc:
    static-path-pattern: /static/**


# spring doc
springdoc:
# JSON 형식의 OpenAPI 문서의 사용자 경로 지정
  api-docs:
    path: /api-docs
    groups:
      enabled: true
  # HTML 형식의 swagger 문서의 사용자 경로 지정
  swagger-ui:
    path: /swagger-ui-custom.html
    enabled: true
    groups-order: ASC
    tags-sorter: alpha
    operations-sorter: alpha
    display-request-duration: true
    doc-expansion: none
  cache:
    disabled: true
  model-and-view-allowed: true


# loging
# race → warn → info → debug → error(적은 로깅) 순
# 개발 서버는 debug, 운영 서버는 info
logging:
  level:
    com.web: debug


#JWT
jwt:
  header: Authorization
  #HS512 알고리즘을 사용할 것이기 때문에 512bit, 즉 64byte 이상의 secret key를 사용해야 한다.
  secret: a15cf4dd194e1bcd6e73cc7de573afdbe3ff6bccbeacbdb3ad7370471e536bddea1fd06a5ed27763b3c893c087eaa52554a7683b40d55ebb42cc9a52b532b43c
  token-validity-in-seconds: 86400  